{"version":3,"sources":["Image.js","Input.js","Trie.js","App.js","useCSVImageLabels.js","index.js"],"names":["Image","src","labels","color","useInView","triggerOnce","rootMargin","ref","inView","data-testid","style","position","minHeight","display","width","alt","map","label","join","top","left","height","key","JSON","stringify","border","fontSize","Input","query","setQuery","normalizeQuery","trie","filterResultsText","debouncedSetQuery","debounce","value","queryAutocomplets","useMemo","getWordsWithPrefix","id","type","placeholder","autoComplete","onChange","target","length","word","zIndex","backgroundColor","minWidth","onClick","document","getElementById","marginTop","cursor","slice","normalizeText","text","replace","trim","toLowerCase","Trie","this","root","children","val","data","p","char","isEnd","rest","push","prefix","p1","leafNodes","q","i","node","shift","Object","values","child","parent","words","leafNode","p2","affix","App","fileUrl","imageIdColumnIndex","columnDelimiter","lineDelimiter","useState","setLabels","setTrie","useEffect","a","fetch","res","body","getReader","read","result","decoder","TextDecoder","csv","decode","split","header","rows","labelsMap","columns","row","rowData","fromEntries","index","Number","entries","forEach","labelGroup","addWord","fetchData","useCSVImageLabels","labelsEntries","filteredLabelsEntries","reduce","acc","cur","fontFamily","scoped","margin","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d413d89e.chunk.js","sourcesContent":["import React from 'react';\nimport { useInView } from 'react-intersection-observer';\n\nexport default function Image({ src, labels, color = '#39ff14' }) {\n  const [ref, inView] = useInView({\n    triggerOnce: true,\n    rootMargin: '200px 0px',\n  });\n\n  return (\n    <div\n      data-testid={src}\n      style={{\n        position: 'relative',\n        minHeight: 500,\n        display: 'flex',\n        width: '100%',\n      }}\n      {...{ ref }}\n    >\n      {inView && (\n        <>\n          <img {...{ src }} alt={labels.map(({ label }) => label).join(', ')} />\n          {labels.map(({ top, left, width, height, label }) => (\n            <div\n              key={JSON.stringify({ top, left, width, height })}\n              style={{\n                position: 'absolute',\n                top,\n                left,\n                width,\n                height,\n                border: `1px solid ${color}`,\n              }}\n            >\n              <span\n                style={{\n                  position: 'absolute',\n                  left: 'calc(100% + 5px)',\n                  fontSize: width / 3.5,\n                  color,\n                }}\n              >\n                {label}\n              </span>\n            </div>\n          ))}\n        </>\n      )}\n    </div>\n  );\n}\n","import debounce from 'lodash.debounce';\nimport React, { useMemo } from 'react';\n\nexport default function Input({\n  query,\n  setQuery,\n  normalizeQuery,\n  trie,\n  filterResultsText,\n}) {\n  const debounceTimeout = 200; //ms\n  const debouncedSetQuery = debounce(\n    (value) => setQuery(normalizeQuery(value)),\n    debounceTimeout\n  );\n\n  const queryAutocomplets = useMemo(() => {\n    if (!query || !trie) return [];\n    return trie.getWordsWithPrefix(query);\n  }, [query, trie]);\n\n  return (\n    <>\n      <input\n        id=\"query-input\"\n        type=\"text\"\n        placeholder=\"Label starts with...\"\n        autoComplete=\"off\"\n        onChange={({ target: { value } }) => debouncedSetQuery(value)}\n      />{' '}\n      {filterResultsText}\n      {queryAutocomplets.length && queryAutocomplets[0].word !== query ? (\n        <ol\n          style={{\n            position: 'absolute',\n            zIndex: 1,\n            backgroundColor: 'rgba(255, 255, 255, 0.88)',\n            minWidth: '150px',\n          }}\n        >\n          {queryAutocomplets.map(({ word }) => (\n            <li\n              key={word}\n              onClick={() => {\n                const queryInput = document.getElementById('query-input');\n                queryInput.value = word;\n                setQuery(word);\n              }}\n              style={{\n                marginTop: '10px',\n                cursor: 'pointer',\n              }}\n            >\n              {word.slice(0, query.length)}\n              <strong>{word.slice(query.length)}</strong>\n            </li>\n          ))}\n        </ol>\n      ) : null}\n    </>\n  );\n}\n","export const normalizeText = (text = '') =>\n  text.replace(/\\s+/g, ' ').trim().toLowerCase();\n\nexport default class Trie {\n  constructor() {\n    this.root = { children: {}, val: '' };\n  }\n\n  addWord(word, data) {\n    if (typeof word !== 'string') return;\n    const text = normalizeText(word);\n    let p = this.root;\n    for (let char of text) {\n      if (!(char in p.children)) {\n        p.children[char] = { val: char, children: {} };\n      }\n      p = p.children[char];\n    }\n    p.children = {};\n    p.isEnd = true;\n    if (data) {\n      const { key, ...rest } = data;\n      if (!p.data) p.data = {};\n      if (!p.data[key]) p.data[key] = [];\n      p.data[key].push(rest);\n    }\n  }\n\n  getWordsWithPrefix(prefix) {\n    if (typeof prefix !== 'string') return [];\n    const text = normalizeText(prefix);\n\n    let p1 = this.root;\n    for (let char of text) {\n      if (!(char in p1.children)) {\n        return [];\n      }\n      p1 = p1.children[char];\n    }\n\n    if (p1.isEnd) return [{ word: prefix, data: p1.data }];\n\n    const leafNodes = [];\n\n    const q = [p1];\n    while (q.length) {\n      const { length } = q;\n      for (let i = 0; i < length; i++) {\n        const node = q.shift();\n        const children = Object.values(node.children);\n        for (let child of children) {\n          child.parent = node;\n          q.push(child);\n        }\n        if (!children.length) {\n          leafNodes.push(node);\n        }\n      }\n    }\n\n    const words = [];\n    for (let leafNode of leafNodes) {\n      let p2 = leafNode;\n      let affix = '';\n      do {\n        affix = p2.val + affix;\n        p2 = p2.parent;\n      } while (p2 !== p1 && p2);\n      words.push({ word: prefix + affix, data: leafNode.data });\n    }\n    return words;\n  }\n}\n","import React, { useState, useMemo } from 'react';\nimport Image from './Image';\nimport Input from './Input';\nimport { normalizeText } from './Trie';\nimport useCSVImageLabels from './useCSVImageLabels';\n\nfunction App() {\n  const [labels, trie] = useCSVImageLabels('/datasets/train_labels.csv');\n\n  const [query, setQuery] = useState('');\n\n  const labelsEntries = Object.entries(labels);\n  const filteredLabelsEntries = useMemo(() => {\n    if (!query || !trie) return [];\n    const wordsWithData = trie.getWordsWithPrefix(query);\n\n    const data = wordsWithData.reduce((acc, cur) => {\n      if (cur && cur.data) {\n        Object.entries(cur.data).forEach(([key, labels]) => {\n          if (key in acc) {\n            acc[key].push(...labels);\n          } else {\n            acc[key] = [...labels];\n          }\n        });\n      }\n      return acc;\n    }, {});\n\n    return Object.entries(data);\n  }, [query, trie]);\n\n  return (\n    <div style={{ fontFamily: 'arial' }}>\n      <style scoped>{'ol { margin: 0; padding: 0; list-style: none; }'}</style>\n      <Input\n        {...{\n          query,\n          setQuery,\n          normalizeQuery: normalizeText,\n          trie,\n          filterResultsText:\n            'showing datasets: ' +\n            (filteredLabelsEntries.length\n              ? `${filteredLabelsEntries.length} / ${labelsEntries.length}`\n              : `${labelsEntries.length}`),\n        }}\n      />\n      <ol>\n        {(filteredLabelsEntries.length\n          ? filteredLabelsEntries\n          : labelsEntries\n        ).map(([key, labels]) => (\n          <li style={{ margin: '10px auto' }} {...{ key }}>\n            <Image src={`datasets/train_images/${key}`} {...{ labels }} />\n          </li>\n        ))}\n      </ol>\n    </div>\n  );\n}\n\nexport default App;\n","import { useEffect, useState } from 'react';\nimport Trie from './Trie';\n\nexport default function useCSVImageLabels(\n  fileUrl,\n  imageIdColumnIndex = 0,\n  columnDelimiter = ',',\n  lineDelimiter = '\\n'\n) {\n  const [labels, setLabels] = useState({});\n  const [trie, setTrie] = useState(null);\n\n  useEffect(() => {\n    async function fetchData() {\n      const res = await fetch(fileUrl);\n      const result = await res.body.getReader().read();\n      const decoder = new TextDecoder('utf-8');\n      const csv = decoder.decode(result.value);\n      const [header, ...rows] = csv.split(lineDelimiter);\n      const labelsMap = {};\n      const columns = header.split(columnDelimiter);\n      for (let row of rows) {\n        const rowData = row.split(columnDelimiter);\n        const id = rowData[imageIdColumnIndex];\n        const label = Object.fromEntries(\n          rowData.map((value, index) => [\n            columns[index]?.toLowerCase(),\n            Number(value) || value,\n          ])\n        );\n        if (id in labelsMap) {\n          labelsMap[id].push(label);\n        } else {\n          labelsMap[id] = [label];\n        }\n      }\n\n      const trie = new Trie();\n      Object.entries(labelsMap).forEach(([key, labelGroups]) => {\n        labelGroups.forEach((labelGroup) => {\n          const { label } = labelGroup;\n          trie.addWord(label, { ...labelGroup, key });\n        });\n      });\n\n      setLabels(labelsMap);\n      setTrie(trie);\n    }\n    fetchData();\n  }, [columnDelimiter, fileUrl, imageIdColumnIndex, lineDelimiter]);\n\n  return [labels, trie];\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}